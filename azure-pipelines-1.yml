trigger:
- none

pool: 
  name: TC_811

parameters:
- name: VM_Environment_Name
  displayName: 'VM Environment Name'
  type: string
  values:
  - TEST1
  - TEST2
  - TEST3
  default: TEST1
- name: Destination_Machine_Name
  displayName: 'Destination Machine Name'
  type: string
  values:
  - DENBG0817VM
  - DENBG0811VM
  default: DENBG0817VM

variables:
  dcusername: 'dcadmin'
  dcpassword: 'dcadmin'
  DC_QUICK_DEPLOY_PATH: '/opt/app/siemens/dc_14.1/deployment_center/additional_tools/internal/dc_quick_deploy'
  DC_URL: 'http://192.168.80.54:8080/deploymentcenter'
  DC_DEPLOY_SCRIPT_DIR_NAME: 'deploy'
  JAVA_HOME: '/opt/app/siemens/JAVA/jdk-11.0.21'
  TARGET_VM_DEPLOY_SCRIPTS_DIR: '/opt/app/siemens'
  TARGET_VM_MAPPED_DRIVE_BACK_TO_DC_REPO: '/opt/app/siemens/dc_14.1/repository/deploy_scripts'
  TARGET_VM_SOFTWARE_LOCATION: '/mnt/dumps/TC/TC14'
  INPUT_FILE_PATH: '/opt/app/siemens/Sample_xml_Files/test_install_Fnd140.xml'
  BUILD_NUMBER: $[counter('build', 1)]
  BUILD_NUMBER_SAFE: $[replace(variables['BUILD_NUMBER'], '.', '_')]

stages:
- stage: Prepare_Variables
  jobs:
  - job: Set_Global_Variables
    pool:
      name: TC_811
    steps:
    - script: |
        echo "##vso[task.setvariable variable=DC_ENV_NAME]${{ parameters.VM_Environment_Name }}_${{ variables['BUILD_NUMBER_SAFE'] }}"
        echo "##vso[task.setvariable variable=SCRIPTS_DIR_NAME]${{ variables['DC_DEPLOY_SCRIPT_DIR_NAME'] }}_${{ variables['BUILD_NUMBER_SAFE'] }}"
        echo "##vso[task.setvariable variable=MACHINE_SCRIPT_DIR_NAME]deploy_${{ parameters.Destination_Machine_Name }}"
        echo "##vso[task.setvariable variable=MACHINE_SCRIPT_ZIP_NAME]${{ variables['MACHINE_SCRIPT_DIR_NAME'] }}.zip"
        echo "##vso[task.setvariable variable=MACHINE_SCRIPT_PATH]${{ variables['TARGET_VM_MAPPED_DRIVE_BACK_TO_DC_REPO'] }}/${{ variables['DC_ENV_NAME'] }}/install/${{ variables['SCRIPTS_DIR_NAME'] }}/${{ variables['MACHINE_SCRIPT_ZIP_NAME'] }}"
        echo "##vso[task.setvariable variable=UNZIP_TARGET_PATH]${{ variables['TARGET_VM_DEPLOY_SCRIPTS_DIR'] }}/${{ variables['SCRIPTS_DIR_NAME'] }}/${{ variables['MACHINE_SCRIPT_DIR_NAME'] }}"
      displayName: 'Prepare Global Variables'

- stage: Generate_Deploy_Script
  jobs:
  - job: Generate
    pool:
      name: TC_811
    steps:
    - script: |
        echo "Generating Deploy script using Quick Deploy"
        cd $(DC_QUICK_DEPLOY_PATH)
        ./dc_quick_deploy.sh -dcurl=$(DC_URL) -environment=$(DC_ENV_NAME) -inputFile=$(INPUT_FILE_PATH) -dcusername=$(dcusername) -dcpassword=$(dcpassword) -scriptDirectoryName=$(SCRIPTS_DIR_NAME) -machine=$(TARGET_VM_MACHINE_NAME)
      displayName: 'Generate Deploy Script'

- stage: Copy_Deploy_Script
  jobs:
  - job: Copy
    pool:
      name: TC_811
    steps:
    - script: |
        echo "Copying files to the destination server"
        scp -r $(MACHINE_SCRIPT_PATH) infodba@192.168.80.108:$(TARGET_VM_DEPLOY_SCRIPTS_DIR)
      displayName: 'Copy Files to Destination Server'

- stage: Unzip_Deploy_Script
  jobs:
  - job: Unzip
    pool:
      name: TC_811
    steps:
    - script: |
        echo "Unzipping files to the destination server"
        ssh -T -o StrictHostKeyChecking=no infodba@192.168.80.108 unzip $(TARGET_VM_DEPLOY_SCRIPTS_DIR)/$(SCRIPTS_DIR_NAME)/$(MACHINE_SCRIPT_ZIP_NAME) -d $(UNZIP_TARGET_PATH)
      displayName: 'Unzip Files on Destination Server'
      
- stage: Execute_Deploy_Script
  jobs:
  - job: Execute
    pool:
      name: TC_811
    steps:
    - script: |
        FULL_COMMAND="cd $(UNZIP_TARGET_PATH) && ./deploy.sh -softwareLocation=$(TARGET_VM_SOFTWARE_LOCATION) -dcusername=$(dcusername) -dcpassword=$(dcpassword)"
        echo "Executing command: $FULL_COMMAND"
        ssh -T -o StrictHostKeyChecking=no infodba@192.168.80.108 "$FULL_COMMAND"
      displayName: 'Execute deploy script in Destination Server'
